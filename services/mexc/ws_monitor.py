import asyncio
import logging
from collections import deque
from typing import Dict, List

from services.mexc.ws_client import MexcWSClient
from services.analysis.signal_analyzer import SignalAnalyzer
from bot.services.telegram_service import TelegramService
from config.settings import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID

logger = logging.getLogger(__name__)


class WSSignalMonitor:
    """
    –†–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ WebSocket
    - –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Ç–æ–∫ —Ü–µ–Ω —Å MEXC Futures
    - —Ö—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ n —Ü–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç RSI –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
    - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –≤ Telegram
    """

    def __init__(self, symbols: List[str]):
        self.symbols = symbols
        self.price_buffers: Dict[str, deque] = {}
        self.max_prices = 300  # —Ö—Ä–∞–Ω–∏—Ç—å 300 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–∏–∫–æ–≤
        self.analyzer = SignalAnalyzer()

        # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.telegram = TelegramService(TELEGRAM_BOT_TOKEN)

        # cooldown –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
        self.signal_cooldown = 60  # —Å–µ–∫—É–Ω–¥
        self.last_signal_time: Dict[str, float] = {}

    async def on_message(self, data: dict):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket
        data: {"s": "BTC_USDT", "c": 65800.5}
        """
        symbol = data.get("s")
        price = float(data.get("c", 0))

        if not symbol or price <= 0:
            return

        # --- –û–±–Ω–æ–≤–ª—è–µ–º –±—É—Ñ–µ—Ä —Ü–µ–Ω ---
        buf = self.price_buffers.setdefault(symbol, deque(maxlen=self.max_prices))
        buf.append(price)

        # --- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª, –∫–æ–≥–¥–∞ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ---
        if len(buf) < 60:  # –º–∏–Ω–∏–º—É–º –¥–ª—è RSI 15m
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º deque –≤ —Å–ø–∏—Å–æ–∫
        prices = list(buf)

        analysis = self.analyzer.analyze_signal(
            prices_1m=prices[-15:],   # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Ç–∏–∫–æ–≤ (–∏–º–∏—Ç–∞—Ü–∏—è 15 –º–∏–Ω—É—Ç)
            prices_15m=prices[-60:],  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Ç–∏–∫–æ–≤
            prices_1h=prices[-240:] if len(prices) >= 240 else prices[-60:],  # –µ—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç
        )

        if analysis["signal_triggered"] and self._can_trigger(symbol):
            self._update_signal_time(symbol)

            logger.info(f"üö® SIGNAL DETECTED: {symbol} ‚Äî RSI/PRICE conditions met")
            await self.telegram.send_signal_alert(
                TELEGRAM_CHAT_ID,
                symbol,
                analysis
            )

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ WebSocket-–º–æ–Ω–∏—Ç–æ—Ä–∞ –¥–ª—è {len(self.symbols)} –ø–∞—Ä...")
        ws_client = MexcWSClient(self.symbols, self.on_message)
        await ws_client.connect_all()

    # --- Internal helpers ---

    def _can_trigger(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ —Å–∏–º–≤–æ–ª–æ–º"""
        import time
        last = self.last_signal_time.get(symbol, 0)
        return time.time() - last >= self.signal_cooldown

    def _update_signal_time(self, symbol: str):
        import time
        self.last_signal_time[symbol] = time.time()
