import asyncio
from typing import Dict, List, Tuple, Optional
from .api_client import MexcClient
from services.analysis import SignalAnalyzer
from config.settings import CHECK_INTERVAL
import logging

logger = logging.getLogger(__name__)


class PairMonitor:
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä MEXC

    Attributes:
        mexc: MEXC API –∫–ª–∏–µ–Ω—Ç
        last_signal_time: –°–ª–æ–≤–∞—Ä—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—Ä–µ–º–µ–Ω —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        signal_cooldown: –í—Ä–µ–º—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
    """

    def __init__(self, signal_cooldown: int = 300):
        """
        Args:
            signal_cooldown: –í—Ä–µ–º—è –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (—Å–µ–∫)
        """
        self.mexc = MexcClient()
        self.last_signal_time: Dict[str, float] = {}
        self.signal_cooldown = signal_cooldown

    async def get_prices_for_symbol(
            self,
            client: MexcClient,
            symbol: str,
            interval: str,
            limit: int
    ) -> List[float]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è —Å–∏–º–≤–æ–ª–∞

        Args:
            client: –£–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–π MEXC –∫–ª–∏–µ–Ω—Ç
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª (1m, 5m, 15m, 1h)
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π

        Returns:
            –°–ø–∏—Å–æ–∫ —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è
        """
        try:
            klines = await client.get_klines(symbol, interval, limit)

            if not klines:
                return []

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            prices = client.extract_close_prices(klines)
            return prices

        except Exception as e:
            logger.error(f"Error getting prices for {symbol} ({interval}): {e}")
            return []

    async def get_volumes_for_symbol(
            self,
            client: MexcClient,
            symbol: str,
            interval: str,
            limit: int
    ) -> List[float]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä—ë–º–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞

        Args:
            client: –£–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–π MEXC –∫–ª–∏–µ–Ω—Ç
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª (1m, 5m, 15m, 1h)
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π

        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—ä—ë–º–æ–≤
        """
        try:
            klines = await client.get_klines(symbol, interval, limit)

            if not klines:
                return []

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä—ë–º—ã
            volumes = client.extract_volumes(klines)
            return volumes

        except Exception as e:
            logger.error(f"Error getting volumes for {symbol} ({interval}): {e}")
            return []

    async def check_symbol(self, symbol: str, client: Optional[MexcClient] = None) -> Tuple[bool, Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–º–≤–æ–ª –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            client: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–ª–∏–µ–Ω—Ç (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)

        Returns:
            Tuple[signal_found, signal_data]
            - signal_found: –ù–∞–π–¥–µ–Ω –ª–∏ —Å–∏–≥–Ω–∞–ª
            - signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ (—Å–∏–º–≤–æ–ª, –∞–Ω–∞–ª–∏–∑, —Ü–µ–Ω—ã, –æ–±—ä—ë–º—ã)
        """
        try:
            logger.debug(f"Checking {symbol}...")

            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
            if client is None:
                async with self.mexc as temp_client:
                    return await self._check_symbol_with_client(symbol, temp_client)
            else:
                return await self._check_symbol_with_client(symbol, client)

        except Exception as e:
            logger.error(f"Error checking symbol {symbol}: {e}", exc_info=True)
            return False, {}

    async def _check_symbol_with_client(self, symbol: str, client: MexcClient) -> Tuple[bool, Dict]:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –≥–æ—Ç–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        results = await asyncio.gather(
            self.get_prices_for_symbol(client, symbol, "1m", 200),
            self.get_prices_for_symbol(client, symbol, "5m", 144),  # 12 —á–∞—Å–æ–≤
            self.get_prices_for_symbol(client, symbol, "15m", 100),
            self.get_prices_for_symbol(client, symbol, "1h", 100),
            self.get_volumes_for_symbol(client, symbol, "5m", 144),
            return_exceptions=True
        )

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        prices_1m, prices_5m, prices_15m, prices_1h, volumes_5m = results

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        if any(isinstance(r, Exception) for r in results):
            logger.error(f"Error in gathering data for {symbol}")
            return False, {}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
        if not all([prices_1m, prices_5m, prices_15m, prices_1h, volumes_5m]):
            logger.debug(f"Incomplete data for {symbol}")
            return False, {}

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
        analysis = SignalAnalyzer.analyze_signal(
            prices_1m[:15],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç (15 —Å–≤–µ—á–µ–π –ø–æ 1–º)
            prices_15m,
            prices_1h
        )

        signal_triggered = analysis['signal_triggered']

        if signal_triggered:
            logger.info(f"üîî Signal detected for {symbol}!")

        return signal_triggered, {
            'symbol': symbol,
            'analysis': analysis,
            'prices_5m': prices_5m,
            'volumes_5m': volumes_5m
        }

    def _check_cooldown(self, symbol: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª, False –µ—Å–ª–∏ cooldown –∞–∫—Ç–∏–≤–µ–Ω
        """
        import time
        current_time = time.time()
        last_time = self.last_signal_time.get(symbol, 0)

        if current_time - last_time >= self.signal_cooldown:
            return True

        remaining = int(self.signal_cooldown - (current_time - last_time))
        logger.debug(f"Cooldown active for {symbol}: {remaining}s remaining")
        return False

    def _update_signal_time(self, symbol: str):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        import time
        self.last_signal_time[symbol] = time.time()

    async def monitor_all_pairs(self) -> List[Dict]:
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤—Å–µ USDT –ø–∞—Ä—ã –∏ –Ω–∞–π—Ç–∏ —Å–∏–≥–Ω–∞–ª—ã

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            async with self.mexc as client:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
                symbols = await client.get_all_symbols()

                if not symbols:
                    logger.warning("No symbols found")
                    return []

                logger.info(f"Monitoring {len(symbols)} symbols...")

                signals = []

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª—ã –ø–æ –æ–¥–Ω–æ–º—É
                for symbol in symbols:
                    try:
                        signal_found, data = await self.check_symbol(symbol, client)

                        if signal_found:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
                            if self._check_cooldown(symbol):
                                signals.append(data)
                                self._update_signal_time(symbol)
                                logger.info(f"‚úÖ Signal added: {symbol}")
                            else:
                                logger.debug(f"Signal ignored (cooldown): {symbol}")

                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                        await asyncio.sleep(0.1)

                    except Exception as e:
                        logger.error(f"Error processing {symbol}: {e}")
                        continue

                if signals:
                    logger.info(f"Found {len(signals)} signals total")
                else:
                    logger.debug("No signals found in this cycle")

                return signals

        except Exception as e:
            logger.error(f"Error monitoring pairs: {e}", exc_info=True)
            return []

    async def monitor_specific_symbols(self, symbols: List[str]) -> List[Dict]:
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã

        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        logger.info(f"Monitoring {len(symbols)} specific symbols...")

        signals = []

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        async with self.mexc as client:
            for symbol in symbols:
                try:
                    signal_found, data = await self.check_symbol(symbol, client)

                    if signal_found and self._check_cooldown(symbol):
                        signals.append(data)
                        self._update_signal_time(symbol)
                        logger.info(f"‚úÖ Signal found: {symbol}")

                    await asyncio.sleep(0.1)

                except Exception as e:
                    logger.error(f"Error checking {symbol}: {e}")
                    continue

        return signals


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def example_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    monitor = PairMonitor(signal_cooldown=300)  # 5 –º–∏–Ω—É—Ç

    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤—Å–µ –ø–∞—Ä—ã
    signals = await monitor.monitor_all_pairs()
    print(f"Found {len(signals)} signals")

    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–ø –ø–∞—Ä—ã
    top_symbols = ["BTC_USDT", "ETH_USDT", "SOL_USDT"]
    signals = await monitor.monitor_specific_symbols(top_symbols)
    print(f"Found {len(signals)} signals in top pairs")


if __name__ == "__main__":
    asyncio.run(example_usage())