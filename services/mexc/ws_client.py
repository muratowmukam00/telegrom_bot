import asyncio
import json
import logging
import re
import websockets
from typing import List, Callable, Optional

logger = logging.getLogger(__name__)

class MexcWSClient:
    """WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è MEXC Futures (USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã)"""

    def __init__(self, symbols: List[str], on_message: Optional[Callable] = None):
        self.symbols = symbols
        self.on_message = on_message
        self.ws_url = "wss://contract.mexc.com/edge"  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π Futures WS endpoint
        self.chunk_size = 200
        self.reconnect_delay = 5

    async def connect_all(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–ø–æ 200 –ø–∞—Ä –º–∞–∫—Å–∏–º—É–º)"""
        tasks = []
        for i in range(0, len(self.symbols), self.chunk_size):
            chunk = self.symbols[i:i + self.chunk_size]
            idx = i // self.chunk_size + 1
            task = asyncio.create_task(self._connect_chunk(chunk, idx))
            tasks.append(task)

        await asyncio.gather(*tasks, return_exceptions=True)

    async def _connect_chunk(self, symbols: List[str], idx: int):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–¥–Ω–æ WS-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ –ø–∞—Ä—ã –∏–∑ —á–∞–Ω–∫–∞"""

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤
        clean_symbols = []
        for s in symbols:
            s = str(s).strip()
            s = re.sub(r"^https?://[^/]+/(?:futures(?:/perpetual)?/)?", "", s, flags=re.IGNORECASE)
            s = s.upper()
            if re.fullmatch(r"[A-Z0-9_]+_USDT", s):
                clean_symbols.append(s)
                logger.debug(f"üîé –û—á–∏—â–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª: {s}")

        if not clean_symbols:
            logger.error(f"‚ùå Chunk #{idx}: –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤!")
            return

        logger.info(f"üîç Chunk #{idx} –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞: {clean_symbols[:3]}... ({len(clean_symbols)} –≤—Å–µ–≥–æ)")

        while True:
            try:
                logger.info(f"üîå Chunk #{idx}: –ø–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ {self.ws_url}...")
                async with websockets.connect(
                    self.ws_url,
                    ping_interval=20,
                    ping_timeout=10,
                    close_timeout=10,
                    max_size=2 ** 20
                ) as ws:
                    logger.info(f"‚úÖ Chunk #{idx}: WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!")

                    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä—ã
                    for symbol in clean_symbols:
                        sub_msg = {
                            "method": "sub.ticker",
                            "param": {
                                "symbol": symbol
                            }
                        }
                        logger.debug(f"üß© SUBSCRIBE DEBUG: {sub_msg}")
                        await ws.send(json.dumps(sub_msg))
                        await asyncio.sleep(0.01)

                    logger.info(f"üìå Chunk #{idx}: –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {len(clean_symbols)} –ø–∞—Ä")

                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    ping_task = asyncio.create_task(self._keep_alive(ws, idx))

                    try:
                        async for msg in ws:
                            logger.debug(f"üì• –°—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {msg}")
                            try:
                                data = json.loads(msg)
                                if isinstance(data, dict):
                                    if data.get("channel") == "rs.error":
                                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {data}")
                                        continue
                                    if "msg" in data and "success" in str(data.get("msg", "")).lower():
                                        logger.info(f"üì® –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {data}")
                                        continue
                                    await self._process_ticker_data(data)
                            except json.JSONDecodeError:
                                logger.warning(f"‚ö†Ô∏è Chunk #{idx}: –Ω–µ –º–æ–≥—É —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {msg}")
                            except Exception as e:
                                logger.error(f"‚ùå Chunk #{idx}: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    finally:
                        ping_task.cancel()
                        try:
                            await ping_task
                        except asyncio.CancelledError:
                            pass

            except websockets.exceptions.WebSocketException as e:
                logger.warning(f"‚ö†Ô∏è Chunk #{idx}: WebSocket –æ—à–∏–±–∫–∞: {e}")
                logger.info(f"üîÑ Chunk #{idx}: –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {self.reconnect_delay}s...")
                await asyncio.sleep(self.reconnect_delay)
            except Exception as e:
                logger.error(f"‚ùå Chunk #{idx}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                logger.info(f"üîÑ Chunk #{idx}: –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {self.reconnect_delay}s...")
                await asyncio.sleep(self.reconnect_delay)

    async def _keep_alive(self, ws, idx: int):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            while True:
                await asyncio.sleep(15)
                ping_msg = {"method": "ping"}
                await ws.send(json.dumps(ping_msg))
                logger.debug(f"üì° Chunk #{idx}: Sent JSON ping")
                try:
                    pong = await ws.ping()
                    await asyncio.wait_for(pong, timeout=10)
                except asyncio.TimeoutError:
                    logger.warning(f"‚ö†Ô∏è Chunk #{idx}: ping timeout - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—é—Å—å")
                    break
        except asyncio.CancelledError:
            pass
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Chunk #{idx}: ping error: {e}")

    async def _process_ticker_data(self, data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞ –æ—Ç MEXC"""
        logger.debug(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Ç–∏–∫–µ—Ä-—Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
        try:
            # –§–æ—Ä–º–∞—Ç 1: {"channel": "push.ticker", "symbol": "BTC_USDT", "data": {...}}
            if "channel" in data and "push.ticker" in data["channel"]:
                symbol = data.get("symbol")
                ticker_data = data.get("data", {})
                if symbol and ticker_data:
                    price = float(ticker_data.get("lastPrice", 0))
                    if price > 0 and self.on_message:
                        # logger.info(f"üìä –¢–∏–∫–µ—Ä: {symbol}, —Ü–µ–Ω–∞: {price}")
                        await self.on_message({"s": symbol, "c": price})
                return

            # –§–æ—Ä–º–∞—Ç 2: {"symbol": "BTC_USDT", "lastPrice": "43210.5", ...}
            if "symbol" in data and "lastPrice" in data:
                symbol = data.get("symbol")
                price = float(data.get("lastPrice", 0))
                if symbol and price > 0 and self.on_message:
                    # logger.info(f"üìä –¢–∏–∫–µ—Ä: {symbol}, —Ü–µ–Ω–∞: {price}")
                    await self.on_message({"s": symbol, "c": price})
                return

            # –§–æ—Ä–º–∞—Ç 3: {"data": {"symbol": "BTC_USDT", "lastPrice": "..."}}
            if "data" in data and isinstance(data["data"], dict):
                ticker_data = data["data"]
                symbol = ticker_data.get("symbol")
                price = float(ticker_data.get("lastPrice", 0))
                if symbol and price > 0 and self.on_message:
                    # logger.info(f"üìä –¢–∏–∫–µ—Ä: {symbol}, —Ü–µ–Ω–∞: {price}")
                    await self.on_message({"s": symbol, "c": price})
                return

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {"symbol": "BTC_USDT", "price": "..."}
            if "symbol" in data and "price" in data:
                symbol = data.get("symbol")
                price = float(data.get("price", 0))
                if symbol and price > 0 and self.on_message:
                    logger.info(f"üìä –¢–∏–∫–µ—Ä: {symbol}, —Ü–µ–Ω–∞: {price}")
                    await self.on_message({"s": symbol, "c": price})
                return

            # logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {data}")
        except (ValueError, TypeError, KeyError) as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–∞: {e}")