import asyncio
import logging
from collections import defaultdict, deque
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class WSPriceManager:
    """–•—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –≤—Å–µ—Ö USDT –ø–∞—Ä –∏–∑ WebSocket"""

    def __init__(self, max_minutes: int = 30):
        # –î–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã —Ö—Ä–∞–Ω–∏–º –æ—á–µ—Ä–µ–¥—å [(–≤—Ä–µ–º—è, —Ü–µ–Ω–∞)]
        self.prices = defaultdict(lambda: deque(maxlen=max_minutes * 60))
        self.last_update = {}

    async def update_price(self, data: dict):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ WebSocket on_message)"""
        try:
            symbol = data.get("s")
            price = float(data.get("c", 0))
            if not symbol or price <= 0:
                return

            now = datetime.utcnow()
            self.prices[symbol].append((now, price))
            self.last_update[symbol] = now
            logger.debug(f"üíæ {symbol}: {price}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≤ update_price: {e}")

    def get_prices_last_n_minutes(self, symbol: str, minutes: int = 15):
        """–í–µ—Ä–Ω—É—Ç—å —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç"""
        cutoff = datetime.utcnow() - timedelta(minutes=minutes)
        return [p for t, p in self.prices[symbol] if t >= cutoff]

    def get_latest_price(self, symbol: str):
        """–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞"""
        if symbol in self.prices and self.prices[symbol]:
            return self.prices[symbol][-1][1]
        return None

    def count_pairs(self):
        """–°–∫–æ–ª—å–∫–æ –ø–∞—Ä —Å–µ–π—á–∞—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è"""
        return len(self.prices)
