import asyncio
import logging
from config.settings import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
from services.mexc import MexcClient, PairMonitor
from services.analysis import RSICalculator, SignalAnalyzer
from bot.services import TelegramService
from bot.utils import ChartGenerator

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_config():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n" + "="*60)
    print("‚úÖ –¢–ï–°–¢ 1: –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø")
    print("="*60)
    
    if TELEGRAM_BOT_TOKEN and TELEGRAM_BOT_TOKEN != "YOUR_BOT_TOKEN_HERE":
        print("‚úÖ TELEGRAM_BOT_TOKEN: OK")
    else:
        print("‚ùå TELEGRAM_BOT_TOKEN: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
        return False
    
    if TELEGRAM_CHAT_ID and TELEGRAM_CHAT_ID != "YOUR_CHAT_ID_HERE":
        print("‚úÖ TELEGRAM_CHAT_ID: OK")
    else:
        print("‚ùå TELEGRAM_CHAT_ID: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
        return False
    
    return True

async def test_mexc_api():
    """–¢–µ—Å—Ç 2: MEXC API"""
    print("\n" + "="*60)
    print("‚úÖ –¢–ï–°–¢ 2: MEXC API")
    print("="*60)
    
    try:
        client = MexcClient()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã
        async with client as c:
            symbols = await c.get_all_symbols()
        
        if symbols:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ü–µ—Ä–≤—ã–µ 5: {symbols[:5]}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª—ã")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–∞—Ä—ã
        test_symbol = symbols[0] if symbols else "BTC_USDT"
        async with client as c:
            klines = await c.get_klines(test_symbol, "1m", 50)
        
        if klines:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å–≤–µ—á–∏ –¥–ª—è {test_symbol}: {len(klines)} —à—Ç—É–∫")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ –¥–ª—è {test_symbol}")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        return False

async def test_rsi_calculation():
    """–¢–µ—Å—Ç 3: –†–∞—Å—á—ë—Ç RSI"""
    print("\n" + "="*60)
    print("‚úÖ –¢–ï–°–¢ 3: –†–ê–°–ß–Å–¢ RSI")
    print("="*60)
    
    try:
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_prices = [100 + i*0.5 for i in range(50)]
        
        rsi_values = RSICalculator.calculate(test_prices, period=14)
        
        if rsi_values:
            last_rsi = rsi_values[-1]
            print(f"‚úÖ RSI —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: {len(rsi_values)} –∑–Ω–∞—á–µ–Ω–∏–π")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π RSI: {last_rsi:.2f}")
            return True
        else:
            print("‚ùå RSI –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ RSI: {e}")
        return False

async def test_signal_analyzer():
    """–¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\n" + "="*60)
    print("‚úÖ –¢–ï–°–¢ 4: –ê–ù–ê–õ–ò–ó –°–ò–ì–ù–ê–õ–û–í")
    print("="*60)
    
    try:
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (15 —Å–≤–µ—á–µ–π –ø–æ 1 –º–∏–Ω)
        prices_1m = [100 + i*0.5 for i in range(15)]
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è 15–º –∏ 1h
        prices_15m = [100 + i*0.3 for i in range(50)]
        prices_1h = [100 + i*0.2 for i in range(100)]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∏–ª—å—Ç—Ä
        f1_passed, f1_change = SignalAnalyzer.check_price_change(prices_1m)
        print(f"‚úÖ –§–∏–ª—å—Ç—Ä 1 (–¶–µ–Ω–∞): {'PASSED' if f1_passed else 'FAILED'}")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {f1_change:.2f}%")
        
        f2_passed, f2_rsi = SignalAnalyzer.check_rsi_1h(prices_1h)
        print(f"‚úÖ –§–∏–ª—å—Ç—Ä 2 (RSI 1h): {'PASSED' if f2_passed else 'FAILED'}")
        print(f"   RSI: {f2_rsi:.2f}")
        
        f3_passed, f3_rsi = SignalAnalyzer.check_rsi_15m(prices_15m)
        print(f"‚úÖ –§–∏–ª—å—Ç—Ä 3 (RSI 15m): {'PASSED' if f3_passed else 'FAILED'}")
        print(f"   RSI: {f3_rsi:.2f}")
        
        # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        analysis = SignalAnalyzer.analyze_signal(prices_1m, prices_15m, prices_1h)
        print(f"\n‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {'–°–ò–ì–ù–ê–õ!' if analysis['signal_triggered'] else '–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞'}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

async def test_telegram():
    """–¢–µ—Å—Ç 5: Telegram —Å–µ—Ä–≤–∏—Å"""
    print("\n" + "="*60)
    print("‚úÖ –¢–ï–°–¢ 5: TELEGRAM –°–ï–†–í–ò–°")
    print("="*60)
    
    try:
        telegram = TelegramService(TELEGRAM_BOT_TOKEN)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = await telegram.send_message(
            TELEGRAM_CHAT_ID,
            "üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞</b>\n\n"
            "‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
        )
        
        if result:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
            await telegram.close()
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
        return False

async def test_chart_generator():
    """–¢–µ—Å—Ç 6: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    print("\n" + "="*60)
    print("‚úÖ –¢–ï–°–¢ 6: –ì–ï–ù–ï–†–ê–¢–û–† –ì–†–ê–§–ò–ö–û–í")
    print("="*60)
    
    try:
        import numpy as np
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        prices = [100 + np.sin(i/10) * 5 for i in range(144)]
        volumes = [1000000 + np.random.randint(-500000, 500000) for _ in range(144)]
        
        chart_path = ChartGenerator.generate_signal_chart(
            "TEST_USDT",
            prices,
            volumes,
            output_path="logs/test_chart.png"
        )
        
        if chart_path:
            print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω: {chart_path}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

async def test_monitor():
    """–¢–µ—Å—Ç 7: –ú–æ–Ω–∏—Ç–æ—Ä –ø–∞—Ä"""
    print("\n" + "="*60)
    print("‚úÖ –¢–ï–°–¢ 7: –ú–û–ù–ò–¢–û–† –ü–ê–† (–ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê)")
    print("="*60)
    
    try:
        monitor = PairMonitor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º 1 –ø–∞—Ä—É
        test_symbol = "BTC_USDT"
        signal_found, data = await monitor.check_symbol(test_symbol)
        
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –ø–∞—Ä–∞: {test_symbol}")
        print(f"   –°–∏–≥–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {'–î–ê' if signal_found else '–ù–ï–¢'}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞: {e}")
        return False

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\n")
    print("‚ïî" + "="*58 + "‚ïó")
    print("‚ïë" + " "*58 + "‚ïë")
    print("‚ïë" + "  üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MEXC SIGNAL BOT".center(58) + "‚ïë")
    print("‚ïë" + " "*58 + "‚ïë")
    print("‚ïö" + "="*58 + "‚ïù")
    
    results = {
        "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è": await test_config(),
        "MEXC API": await test_mexc_api(),
        "–†–∞—Å—á—ë—Ç RSI": await test_rsi_calculation(),
        "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤": await test_signal_analyzer(),
        "Telegram": await test_telegram(),
        "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤": await test_chart_generator(),
        "–ú–æ–Ω–∏—Ç–æ—Ä –ø–∞—Ä": await test_monitor(),
    }
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    for test_name, result in results.items():
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{test_name}: {status}")
    
    passed = sum(1 for r in results.values() if r)
    total = len(results)
    
    print("\n" + "="*60)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    print("="*60 + "\n")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
    else:
        print(f"‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç(–æ–≤) –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")

if __name__ == "__main__":
    asyncio.run(main())
