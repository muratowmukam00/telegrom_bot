from aiogram import Bot
from aiogram.types import FSInputFile
from typing import Optional
import os

class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram"""
    
    def __init__(self, bot_token: str):
        self.bot = Bot(token=bot_token)
    
    async def send_message(
        self,
        chat_id: str,
        text: str,
        parse_mode: str = "HTML"
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=parse_mode
            )
            return True
        except Exception as e:
            print(f"Error sending message: {e}")
            return False
    
    async def send_photo(
        self,
        chat_id: str,
        photo_path: str,
        caption: str = ""
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é"""
        try:
            if not os.path.exists(photo_path):
                print(f"Photo not found: {photo_path}")
                return False
            
            photo = FSInputFile(photo_path)
            await self.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=caption,
                parse_mode="HTML"
            )
            return True
        except Exception as e:
            print(f"Error sending photo: {e}")
            return False
    
    async def send_signal_alert(
        self,
        chat_id: str,
        symbol: str,
        analysis: dict
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –æ —Å–∏–≥–Ω–∞–ª–µ"""
        try:
            f1_passed, f1_change = analysis['filter_1_price']
            f2_passed, f2_rsi = analysis['filter_2_rsi_1h']
            f3_passed, f3_rsi = analysis['filter_3_rsi_15m']
            
            message = f"""
üö® <b>–°–ò–ì–ù–ê–õ –û–ë–ù–ê–†–£–ñ–ï–ù!</b>

üìä –°–∏–º–≤–æ–ª: <b>{symbol}</b>

‚úÖ <b>–§–∏–ª—å—Ç—Ä 1 (–¶–µ–Ω–∞ 15–º):</b> {"‚úì PASSED" if f1_passed else "‚úó FAILED"}
   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {f1_change:.2f}%

‚úÖ <b>–§–∏–ª—å—Ç—Ä 2 (RSI 1h):</b> {"‚úì PASSED" if f2_passed else "‚úó FAILED"}
   RSI: {f2_rsi:.2f}

‚úÖ <b>–§–∏–ª—å—Ç—Ä 3 (RSI 15m):</b> {"‚úì PASSED" if f3_passed else "‚úó FAILED"}
   RSI: {f3_rsi:.2f}

üéØ <b>–ò—Ç–æ–≥: {"–°–ò–ì–ù–ê–õ –ì–û–¢–û–í!" if analysis['signal_triggered'] else "–£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"}</b>
            """
            
            await self.send_message(chat_id, message)
            return True
        except Exception as e:
            print(f"Error sending signal alert: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é –±–æ—Ç–∞"""
        await self.bot.session.close()
