import asyncio
import logging
import os
from typing import Optional
from aiogram import Bot
from aiogram.types import FSInputFile

logger = logging.getLogger(__name__)


class TelegramService:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram.
    –í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π retry –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö —Å–µ—Ç–∏.
    """

    def __init__(self, bot_token: str, max_retries: int = 3, retry_delay: int = 2):
        self.bot = Bot(token=bot_token)
        self.max_retries = max_retries
        self.retry_delay = retry_delay

    async def _retry_send(self, func, *args, **kwargs) -> bool:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —Å retry-–º–µ—Ö–∞–Ω–∏–∑–º–æ–º.
        """
        for attempt in range(1, self.max_retries + 1):
            try:
                await func(*args, **kwargs)
                return True
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Telegram API (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{self.max_retries}): {e}")
                if attempt < self.max_retries:
                    await asyncio.sleep(self.retry_delay * attempt)
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}", exc_info=True)
                    return False

    async def send_message(
        self,
        chat_id: str,
        text: str,
        parse_mode: str = "HTML"
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return await self._retry_send(
            self.bot.send_message,
            chat_id=chat_id,
            text=text,
            parse_mode=parse_mode
        )

    async def send_photo(
        self,
        chat_id: str,
        photo_path: str,
        caption: str = "",
        parse_mode: str = "HTML"
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é"""
        if not os.path.exists(photo_path):
            logger.warning(f"–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {photo_path}")
            return False

        photo = FSInputFile(photo_path)
        return await self._retry_send(
            self.bot.send_photo,
            chat_id=chat_id,
            photo=photo,
            caption=caption,
            parse_mode=parse_mode
        )

    async def send_signal_alert(
        self,
        chat_id: str,
        symbol: str,
        analysis: dict
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ"""
        try:
            f1_passed, f1_change = analysis.get('filter_1_price', (False, 0))
            f2_passed, f2_rsi = analysis.get('filter_2_rsi_1h', (False, 0))
            f3_passed, f3_rsi = analysis.get('filter_3_rsi_15m', (False, 0))

            message = (
                f"üö® <b>–°–ò–ì–ù–ê–õ –û–ë–ù–ê–†–£–ñ–ï–ù!</b>\n\n"
                f"üìä –°–∏–º–≤–æ–ª: <b>{symbol}</b>\n\n"
                f"‚úÖ <b>–§–∏–ª—å—Ç—Ä 1 (–¶–µ–Ω–∞ 15–º):</b> {'‚úì PASSED' if f1_passed else '‚úó FAILED'}\n"
                f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {f1_change:.2f}%\n\n"
                f"‚úÖ <b>–§–∏–ª—å—Ç—Ä 2 (RSI 1h):</b> {'‚úì PASSED' if f2_passed else '‚úó FAILED'}\n"
                f"   RSI: {f2_rsi:.2f}\n\n"
                f"‚úÖ <b>–§–∏–ª—å—Ç—Ä 3 (RSI 15m):</b> {'‚úì PASSED' if f3_passed else '‚úó FAILED'}\n"
                f"   RSI: {f3_rsi:.2f}\n\n"
                f"üéØ <b>–ò—Ç–æ–≥:</b> {'–°–ò–ì–ù–ê–õ –ì–û–¢–û–í!' if analysis.get('signal_triggered') else '–£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã'}"
            )

            return await self.send_message(chat_id, message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}", exc_info=True)
            return False

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é Telegram –±–æ—Ç–∞"""
        try:
            await self.bot.session.close()
            logger.info("‚úÖ Telegram —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
