#!/usr/bin/env python3
"""
–ì–∏–±—Ä–∏–¥–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ MEXC (WebSocket + REST API)
–ó–∞–ø—É—Å–∫: python run_hybrid.py
"""

import asyncio
import logging
import time
from typing import Dict, List
from collections import defaultdict

from config.settings import (
    TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, PRICE_CHANGE_THRESHOLD,
    RSI_OVERBOUGHT, RSI_OVERSOLD, RSI_PERIOD
)
from bot.services import TelegramService
from services.mexc.api_client import MexcClient
from services.analysis import RSICalculator
from services.mexc.ws_client import MexcWSClient

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –¢–æ–ø –ø–∞—Ä—ã MEXC (–±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –±–µ–∑ API)
TOP_SYMBOLS = [
    "BTC_USDT", "ETH_USDT", "SOL_USDT", "BNB_USDT", "XRP_USDT",
    "ADA_USDT", "DOGE_USDT", "AVAX_USDT", "MATIC_USDT", "DOT_USDT",
    "LINK_USDT", "LTC_USDT", "BCH_USDT", "XLM_USDT", "ATOM_USDT",
    "NEAR_USDT", "ARB_USDT", "OP_USDT", "APE_USDT", "SAND_USDT",
    "MANA_USDT", "GALA_USDT", "ENJ_USDT", "IMX_USDT", "FLM_USDT"
]


class HybridMonitor:
    def __init__(self, bot_token: str, chat_id: str):
        self.telegram = TelegramService(bot_token)
        self.chat_id = chat_id

        # –ë—É—Ñ–µ—Ä —Ü–µ–Ω (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –º–∏–Ω—É—Ç)
        self.prices: Dict[str, List[float]] = defaultdict(list)
        self.timestamps: Dict[str, List[float]] = defaultdict(list)
        self.max_buffer = 1200

        # –¢—Ä–µ–∫–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.last_signal_time: Dict[str, float] = {}
        self.cooldown = 300

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.ticks_received = 0
        self.signals_found = 0
        self.price_alerts = 0
        self.start_time = time.time()
        self.is_running = False

    async def handle_ws_message(self, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ WebSocket"""
        try:
            symbol = data.get("s", "").upper()
            price = float(data.get("c", 0))

            if not symbol or price <= 0:
                return

            now = time.time()

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
            self.prices[symbol].append(price)
            self.timestamps[symbol].append(now)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
            if len(self.prices[symbol]) > self.max_buffer:
                self.prices[symbol].pop(0)
                self.timestamps[symbol].pop(0)

            self.ticks_received += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–∫
            await self.check_price_alert(symbol)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WS: {e}")

    async def check_price_alert(self, symbol: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ 15 –º–∏–Ω—É—Ç"""
        if len(self.prices[symbol]) < 2:
            return

        now = time.time()
        cutoff_time = now - 900  # 15 –º–∏–Ω—É—Ç

        # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—É 15 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        old_price = None
        for i, timestamp in enumerate(self.timestamps[symbol]):
            if timestamp >= cutoff_time:
                if i > 0:
                    old_price = self.prices[symbol][i - 1]
                break

        if old_price is None or old_price <= 0:
            return

        new_price = self.prices[symbol][-1]
        price_change = abs((new_price - old_price) / old_price * 100)

        # –ï—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ >= –ø–æ—Ä–æ–≥–∞
        if price_change >= PRICE_CHANGE_THRESHOLD:
            self.price_alerts += 1
            logger.info(f"[ALERT] {symbol}: {price_change:.2f}% –∑–∞ 15 –º–∏–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
            last_signal = self.last_signal_time.get(symbol, 0)
            if now - last_signal < self.cooldown:
                logger.debug(f"  -> Cooldown")
                return

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É RSI
            await self.verify_with_rsi(symbol, price_change)

    async def verify_with_rsi(self, symbol: str, price_change: float):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å RSI –¥–ª—è –ø–∞—Ä—ã"""
        try:
            logger.info(f"[RSI CHECK] {symbol}")

            async with MexcClient(timeout=30) as client:
                klines_1h = await client.get_klines(symbol, "1h", 100)
                klines_15m = await client.get_klines(symbol, "15m", 100)

            if not klines_1h or not klines_15m:
                logger.warning(f"  -> –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return

            prices_1h = [float(k.get("close", 0)) for k in klines_1h]
            prices_15m = [float(k.get("close", 0)) for k in klines_15m]

            if len(prices_1h) < 30 or len(prices_15m) < 30:
                return

            # –†–∞—Å—á–µ—Ç RSI
            rsi_1h = RSICalculator.get_last_rsi(prices_1h, RSI_PERIOD)
            rsi_15m = RSICalculator.get_last_rsi(prices_15m, RSI_PERIOD)

            rsi_1h_passed = rsi_1h > RSI_OVERBOUGHT or rsi_1h < RSI_OVERSOLD
            rsi_15m_passed = rsi_15m > RSI_OVERBOUGHT or rsi_15m < RSI_OVERSOLD

            logger.info(f"  RSI 1h: {rsi_1h:.1f} ({'‚úì' if rsi_1h_passed else '‚úó'})")
            logger.info(f"  RSI 15m: {rsi_15m:.1f} ({'‚úì' if rsi_15m_passed else '‚úó'})")

            # –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã?
            if rsi_1h_passed and rsi_15m_passed:
                self.signals_found += 1
                self.last_signal_time[symbol] = time.time()

                logger.warning(f"üö® SIGNAL FOUND: {symbol}!")

                analysis = {
                    'signal_triggered': True,
                    'filter_1_price': (True, price_change),
                    'filter_2_rsi_1h': (True, rsi_1h),
                    'filter_3_rsi_15m': (True, rsi_15m),
                }

                await self.telegram.send_signal_alert(
                    self.chat_id,
                    symbol,
                    analysis
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ RSI –¥–ª—è {symbol}: {e}")

    async def stats_loop(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        while self.is_running:
            await asyncio.sleep(60)

            uptime = time.time() - self.start_time
            logger.info(f"\n{'=' * 70}")
            logger.info(f"STATS (uptime: {uptime / 60:.1f} –º–∏–Ω)")
            logger.info(f"  –¢–∏–∫–æ–≤: {self.ticks_received}")
            logger.info(f"  Price alerts: {self.price_alerts}")
            logger.info(f"  –°–∏–≥–Ω–∞–ª–æ–≤: {self.signals_found}")
            logger.info(f"  –ü–∞—Ä –∞–∫—Ç–∏–≤–Ω—ã: {len(self.prices)}")
            logger.info(f"{'=' * 70}\n")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = True
        logger.info("=" * 70)
        logger.info("HYBRID MONITOR (WebSocket + REST API)")
        logger.info("=" * 70)

        try:
            symbols = TOP_SYMBOLS
            logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–º {len(symbols)} –ø–∞—Ä: {symbols[:5]}...")

            await self.telegram.send_message(
                self.chat_id,
                f"‚úÖ WebSocket –º–æ–Ω–∏—Ç–æ—Ä –ó–ê–ü–£–©–ï–ù\n\n"
                f"–ü–∞—Ä: {len(symbols)}\n"
                f"–§–∏–ª—å—Ç—Ä—ã:\n"
                f"  ‚Ä¢ –¶–µ–Ω–∞: ¬±{PRICE_CHANGE_THRESHOLD}% –∑–∞ 15 –º–∏–Ω\n"
                f"  ‚Ä¢ RSI 1h: –±–æ–ª—å—à–µ {RSI_OVERBOUGHT} –∏–ª–∏ –º–µ–Ω—å—à–µ {RSI_OVERSOLD}\n"
                f"  ‚Ä¢ RSI 15m: –±–æ–ª—å—à–µ {RSI_OVERBOUGHT} –∏–ª–∏ –º–µ–Ω—å—à–µ {RSI_OVERSOLD}\n"
                f"  ‚Ä¢ Cooldown: 5 –º–∏–Ω"
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º WS –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            ws_client = MexcWSClient(symbols, on_message=self.handle_ws_message)

            await asyncio.gather(
                ws_client.connect_all(),
                self.stats_loop(),
                return_exceptions=True
            )

        except KeyboardInterrupt:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        finally:
            self.is_running = False
            await self.stop()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞"""
        uptime = time.time() - self.start_time

        try:
            await self.telegram.send_message(
                self.chat_id,
                f"üõë –ú–æ–Ω–∏—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n"
                f"–†–∞–±–æ—Ç–∞–ª: {uptime / 3600:.1f}h\n"
                f"–°–∏–≥–Ω–∞–ª–æ–≤: {self.signals_found}"
            )
        except:
            pass

        await self.telegram.close()
        logger.info("‚úì –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    monitor = HybridMonitor(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)
    await monitor.start()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Exit")