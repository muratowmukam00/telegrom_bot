import asyncio
import sys
sys.path.insert(0, '.')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
# (—Å–∫–æ–ø–∏—Ä—É–π –∫–æ–¥ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –≤ services/mexc/api_client.py)

from services.mexc import MexcClient

async def test_fixed_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç"""
    
    print("=" * 60)
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û API –ö–õ–ò–ï–ù–¢–ê")
    print("=" * 60)
    
    async with MexcClient() as client:
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã
        print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤...")
        symbols = await client.get_all_symbols()
        
        if symbols:
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ü–µ—Ä–≤—ã–µ 5: {symbols[:5]}")
        else:
            print("   ‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–∏–º–≤–æ–ª—ã")
            return
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–∞–µ–º klines –¥–ª—è BTC_USDT
        test_symbol = "BTC_USDT"
        print(f"\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ klines –¥–ª—è {test_symbol}...")
        
        intervals_to_test = ["1m", "5m", "15m", "1h"]
        
        for interval in intervals_to_test:
            klines = await client.get_klines(test_symbol, interval, 100)
            
            if klines:
                print(f"   ‚úÖ {interval:5s}: {len(klines)} —Å–≤–µ—á–µ–π")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã
                prices = client.extract_close_prices(klines)
                volumes = client.extract_volumes(klines)
                
                if prices:
                    print(f"           –¶–µ–Ω–∞: {prices[-1]:.2f} (min: {min(prices):.2f}, max: {max(prices):.2f})")
                if volumes:
                    print(f"           –û–±—ä–µ–º: {sum(volumes):.0f}")
            else:
                print(f"   ‚ùå {interval:5s}: –ù–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ")
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–∞–µ–º 24h –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        print(f"\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ 24h –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è {test_symbol}...")
        change = await client.get_24h_price_change(test_symbol)
        
        if change is not None:
            print(f"   ‚úÖ 24h –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {change:.2f}%")
        else:
            print(f"   ‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤
        print(f"\n4Ô∏è‚É£ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ø-5 —Å–∏–º–≤–æ–ª–æ–≤...")
        
        for symbol in symbols[:5]:
            klines = await client.get_klines(symbol, "1m", 50)
            
            if klines:
                prices = client.extract_close_prices(klines)
                print(f"   ‚úÖ {symbol:15s}: {len(klines)} —Å–≤–µ—á–µ–π, —Ü–µ–Ω–∞: {prices[-1] if prices else 'N/A'}")
            else:
                print(f"   ‚ùå {symbol:15s}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("=" * 60)


if __name__ == "__main__":
    asyncio.run(test_fixed_api())
