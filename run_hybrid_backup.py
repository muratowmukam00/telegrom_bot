# python
#!/usr/bin/env python3
"""
MEXC Signal Bot - Production Version (Memory optimized)
–ì–∏–±—Ä–∏–¥–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (WebSocket + REST API)
–ú–µ–Ω—å—à–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ RAM: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç deque –¥–ª—è –±—É—Ñ–µ—Ä–æ–≤ –∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
"""

import asyncio
import logging
import signal
import sys
import time
from collections import defaultdict, deque
from pathlib import Path
from typing import Dict, Deque, Tuple, List

from bot.services import TelegramService
from bot.utils.chart_generator import ChartGenerator
from config.settings import (
    TELEGRAM_BOT_TOKEN,
    TELEGRAM_CHAT_ID,
    PRICE_CHANGE_THRESHOLD,
    RSI_OVERBOUGHT,
    RSI_OVERSOLD,
    RSI_PERIOD
)
from services.analysis import RSICalculator
from services.mexc.api_client import MexcClient
from services.mexc.ws_client import MexcWSClient


def setup_logging():
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)

    file_handler = logging.FileHandler(log_dir / "bot_production.log")
    file_handler.setLevel(logging.INFO)

    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)

    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    file_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)

    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)
    root_logger.addHandler(file_handler)
    root_logger.addHandler(console_handler)

    return logging.getLogger(__name__)


logger = setup_logging()


class WSNoiseFilter(logging.Filter):
    def filter(self, record):
        msg = record.getMessage()
        noise_patterns = [
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
            "'data': 'success'",
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"
        ]
        return not any(pattern in msg for pattern in noise_patterns)


for name in logging.root.manager.loggerDict:
    logging.getLogger(name).addFilter(WSNoiseFilter())


SYMBOLS_FILE = Path("data/symbols_usdt.txt")
STATS_INTERVAL = 300  # 5 minutes


class HybridMonitor:
    """
    Memory-optimized HybridMonitor
    - uses deque of (timestamp, price) per symbol
    - trims very old data proactively
    """

    def __init__(self, bot_token: str, chat_id: str):
        self.telegram = TelegramService(bot_token)
        self.chat_id = chat_id

        # –ë—É—Ñ–µ—Ä—ã: deque[(timestamp, price)]
        self.buffers: Dict[str, Deque[Tuple[float, float]]] = {}

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —É–º–µ–Ω—å—à—ë–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ RAM
        self.max_buffer = 300  # previously 1200

        # –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∏–≥–Ω–∞–ª–æ–≤
        self.last_signal_time: Dict[str, float] = {}
        self.cooldown = 300  # 5 minutes

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.ticks_received = 0
        self.signals_found = 0
        self.price_alerts = 0
        self.errors_count = 0
        self.start_time = time.time()
        self.last_stats_time = time.time()

        # –§–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.is_running = False
        self.shutdown_event = asyncio.Event()

        # WebSocket –∫–ª–∏–µ–Ω—Ç
        self.ws_client = None

    async def handle_ws_message(self, data: dict):
        try:
            symbol = data.get("s", "").upper()
            price = float(data.get("c", 0))

            if not symbol or price <= 0:
                return

            now = time.time()

            # –ü–æ–ª—É—á–∞–µ–º / —Å–æ–∑–¥–∞—ë–º deque –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            buf = self.buffers.get(symbol)
            if buf is None:
                buf = deque(maxlen=self.max_buffer)
                self.buffers[symbol] = buf

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å (ts, price)
            buf.append((now, price))
            self.ticks_received += 1

            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞ (–æ—á–µ–Ω—å —Ä–µ–¥–∫–æ –Ω—É–∂–Ω—ã)
            # –û—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ RSI/–≥—Ä–∞—Ñ–∏–∫–æ–≤; –≤—ã–±–æ—Ä –ø–æ—Ä–æ–≥–∞ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
            one_hour_ago = now - 3600
            while buf and buf[0][0] < one_hour_ago:
                buf.popleft()

            await self.check_price_alert(symbol)

        except Exception as e:
            self.errors_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WS: {e}", exc_info=True)

    async def check_price_alert(self, symbol: str):
        buf = self.buffers.get(symbol)
        if not buf or len(buf) < 2:
            return

        now = time.time()
        cutoff_time = now - 900  # 15 minutes

        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É: –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å timestamp >= cutoff -> –±–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        old_price = None
        for i, (ts, p) in enumerate(buf):
            if ts >= cutoff_time:
                if i > 0:
                    old_price = buf[i - 1][1]
                break

        if old_price is None or old_price <= 0:
            return

        new_price = buf[-1][1]
        price_change = abs((new_price - old_price) / old_price * 100)

        if price_change >= PRICE_CHANGE_THRESHOLD:
            self.price_alerts += 1
            logger.info(f"[PRICE ALERT] {symbol}: {price_change:.2f}% –∑–∞ 15 –º–∏–Ω")

            last_signal = self.last_signal_time.get(symbol, 0)
            if now - last_signal < self.cooldown:
                return

            await self.verify_with_rsi(symbol, price_change)

    async def verify_with_rsi(self, symbol: str, price_change: float):
        try:
            logger.info(f"[RSI CHECK] {symbol}")

            async with MexcClient(timeout=30) as client:
                klines_1h = await client.get_klines(symbol, "1h", 100)
                klines_15m = await client.get_klines(symbol, "15m", 100)

            if not klines_1h or not klines_15m:
                logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return

            prices_1h = [float(k.get("close", 0)) for k in klines_1h]
            prices_15m = [float(k.get("close", 0)) for k in klines_15m]

            if len(prices_1h) < 30 or len(prices_15m) < 30:
                return

            rsi_1h = RSICalculator.get_last_rsi(prices_1h, RSI_PERIOD)
            rsi_15m = RSICalculator.get_last_rsi(prices_15m, RSI_PERIOD)

            rsi_1h_passed = rsi_1h > RSI_OVERBOUGHT or rsi_1h < RSI_OVERSOLD
            rsi_15m_passed = rsi_15m > RSI_OVERBOUGHT or rsi_15m < RSI_OVERSOLD

            logger.info(f"  RSI 1h: {rsi_1h:.1f} ({'‚úì' if rsi_1h_passed else '‚úó'})")
            logger.info(f"  RSI 15m: {rsi_15m:.1f} ({'‚úì' if rsi_15m_passed else '‚úó'})")

            if rsi_1h_passed and rsi_15m_passed:
                await self.send_signal(symbol, price_change, rsi_1h, rsi_15m)

        except Exception as e:
            self.errors_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ RSI –¥–ª—è {symbol}: {e}", exc_info=True)

    async def send_signal(
            self,
            symbol: str,
            price_change: float,
            rsi_1h: float,
            rsi_15m: float
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram"""
        try:
            self.signals_found += 1
            self.last_signal_time[symbol] = time.time()

            logger.warning(f"üö® SIGNAL FOUND: {symbol}!")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            async with MexcClient(timeout=30) as client:
                candles_5m = await client.get_klines(symbol, "5m", 144)
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ 24h –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                ticker = await client.get_24h_price_change(symbol)

            if candles_5m and len(candles_5m) > 0:
                Path("charts").mkdir(exist_ok=True)
                timestamp = time.strftime("%Y%m%d_%H%M%S")
                chart_path = f"charts/{symbol}_{timestamp}_signal.png"

                chart_path = ChartGenerator.generate_signal_chart(
                    symbol=symbol,
                    candles=candles_5m,
                    output_path=chart_path
                )

                if chart_path and Path(chart_path).exists():
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –º–æ–Ω–µ—Ç—ã (BTC_USDT -> BTC)
                    coin_name = symbol.replace("_USDT", "")

                    # –§–æ—Ä–º–∏—Ä—É–µ–º caption –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                    caption = (
                        f"üìä <b>{symbol}</b> ‚Äî –°–∏–≥–Ω–∞–ª –ø–æ RSI\n\n"
                        f"üìà –¶–µ–Ω–∞ (15–º–∏–Ω): {price_change:+.2f}%\n"
                        f"üî¥ RSI 1h: {rsi_1h:.1f}\n"
                        f"üî¥ RSI 15m: {rsi_15m:.1f}"
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
                    await self.telegram.send_photo(
                        chat_id=self.chat_id,
                        photo_path=chart_path,
                        caption=caption
                    )

                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
                    current_price = float(candles_5m[-1].get("close", 0))

                    # –û–±—ä–µ–º 24h (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    volume_24h = sum([float(c.get("vol", 0)) for c in candles_5m[-288:]]) if len(
                        candles_5m) >= 288 else 0
                    volume_24h_str = f"{volume_24h / 1_000_000:.2f}m" if volume_24h > 0 else "N/A"

                    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24h
                    change_24h = ticker if ticker else price_change
                    change_24h_str = f"{change_24h:+.1f}%"

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≥—Ä–∞—Ñ–∏–∫–∞
                    text_message = (
                        f"<a href='https://www.mexc.com/futures/perpetual/{coin_name}_USDT'>#{coin_name}</a>  {symbol}\n"
                        f"{'üü¢' if price_change > 0 else 'üî¥'} {price_change:+.2f}%\n"
                        f"{current_price:.6f} USDT\n"
                        f"RSI 1h: {rsi_1h:.2f}\n"
                        f"RSI 15m: {rsi_15m:.2f}\n"
                        f"–û–±—ä–µ–º 24h: {volume_24h_str}\n"
                        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24h: {change_24h_str}"
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.telegram.send_message(
                        chat_id=self.chat_id,
                        text=text_message
                    )

                    logger.info(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è {symbol}")

        except Exception as e:
            self.errors_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {symbol}: {e}", exc_info=True)


    async def stats_loop(self):
        while self.is_running:
            try:
                await asyncio.sleep(STATS_INTERVAL)
                if not self.is_running:
                    break

                uptime = time.time() - self.start_time
                rate = self.ticks_received / uptime if uptime > 0 else 0

                logger.info(
                    f"\n{'=' * 70}\n"
                    f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê (uptime: {uptime / 60:.1f} –º–∏–Ω)\n"
                    f"  ‚Ä¢ –¢–∏–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {self.ticks_received} ({rate:.1f}/—Å–µ–∫)\n"
                    f"  ‚Ä¢ Price alerts: {self.price_alerts}\n"
                    f"  ‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤: {self.signals_found}\n"
                    f"  ‚Ä¢ –û—à–∏–±–æ–∫: {self.errors_count}\n"
                    f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: {len(self.buffers)}\n"
                    f"{'=' * 70}\n"
                )
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ stats_loop: {e}")

    async def start(self):
        self.is_running = True

        logger.info("=" * 70)
        logger.info("üöÄ MEXC SIGNAL BOT (Production Mode)")
        logger.info("=" * 70)

        try:
            if not SYMBOLS_FILE.exists():
                raise FileNotFoundError(
                    f"–§–∞–π–ª {SYMBOLS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                    "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python tools/update_symbols.py"
                )

            symbols = [
                line.strip()
                for line in SYMBOLS_FILE.read_text().splitlines()
                if line.strip()
            ]

            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(symbols)} USDT –ø–∞—Ä")

            await self.telegram.send_message(
                self.chat_id,
                f"‚úÖ <b>MEXC Signal Bot –∑–∞–ø—É—â–µ–Ω</b>\n\n"
                f"üìä –ü–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {len(symbols)}\n"
                f"üîç –§–∏–ª—å—Ç—Ä—ã:\n"
                f"  ‚Ä¢ –¶–µ–Ω–∞: ¬±{PRICE_CHANGE_THRESHOLD}% –∑–∞ 15 –º–∏–Ω\n"
                f"  ‚Ä¢ RSI 1h: &gt;{RSI_OVERBOUGHT} –∏–ª–∏ &lt;{RSI_OVERSOLD}\n"
                f"  ‚Ä¢ RSI 15m: &gt;{RSI_OVERBOUGHT} –∏–ª–∏ &lt;{RSI_OVERSOLD}\n"
                f"  ‚Ä¢ Cooldown: 5 –º–∏–Ω\n\n"
                f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫: WebSocket + REST API"
            )

            self.ws_client = MexcWSClient(symbols, on_message=self.handle_ws_message)

            tasks = [
                asyncio.create_task(self.ws_client.connect_all(), name="websocket"),
                asyncio.create_task(self.stats_loop(), name="stats"),
            ]

            await self.shutdown_event.wait()

            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–∞—é –∑–∞–¥–∞—á–∏...")

            if self.ws_client:
                await self.ws_client.stop()

            for task in tasks:
                if not task.done():
                    task.cancel()

            await asyncio.gather(*tasks, return_exceptions=True)

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            await self.telegram.send_message(
                self.chat_id,
                f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞</b>\n\n"
                f"<code>{str(e)[:500]}</code>"
            )
        finally:
            await self.stop()

    async def stop(self):
        if not self.is_running:
            return

        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        self.is_running = False
        self.shutdown_event.set()

        uptime = time.time() - self.start_time

        try:
            await self.telegram.send_message(
                self.chat_id,
                f"üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime / 3600:.1f}h\n"
                f"üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {self.signals_found}\n"
                f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–∏–∫–æ–≤: {self.ticks_received}\n"
                f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {self.errors_count}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

        await self.telegram.close()
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        sys.exit(1)

    monitor = HybridMonitor(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)

    def signal_handler(signum, frame):
        signame = signal.Signals(signum).name
        logger.info(f"\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signame} ‚Äî –∏–Ω–∏—Ü–∏–∏—Ä—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")
        monitor.is_running = False
        try:
            loop = asyncio.get_event_loop()
            loop.call_soon_threadsafe(monitor.shutdown_event.set)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ shutdown_event: {e}")
            sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞... (–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
        await monitor.start()
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è KeyboardInterrupt ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
        await monitor.stop()
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await monitor.stop()
        sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥")
    except Exception as e:
        logger.error(f"Fatal error: {e}", exc_info=True)
        sys.exit(1)
