import asyncio
import logging
from aiogram import Dispatcher, types
from aiogram.filters import Command

from config.settings import (
    TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, CHECK_INTERVAL, LOG_LEVEL
)
from bot.services import TelegramService
from bot.utils import ChartGenerator
from bot.handlers import commands
from services.mexc import PairMonitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class MexcSignalBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    
    def __init__(self, bot_token: str, chat_id: str):
        self.telegram = TelegramService(bot_token)
        self.chat_id = chat_id
        self.monitor = PairMonitor()
        self.is_running = False
    
    async def process_signal(self, signal_data: dict) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥—Ä–∞—Ñ–∏–∫"""
        try:
            symbol = signal_data['symbol']
            analysis = signal_data['analysis']
            prices_5m = signal_data['prices_5m']
            volumes_5m = signal_data['volumes_5m']
            
            logger.info(f"Processing signal for {symbol}...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
            await self.telegram.send_signal_alert(
                self.chat_id,
                symbol,
                analysis
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart_path = ChartGenerator.generate_signal_chart(
                symbol,
                prices_5m,
                volumes_5m,
                output_path=f"logs/{symbol}_signal.png"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            if chart_path:
                await self.telegram.send_photo(
                    self.chat_id,
                    chart_path,
                    caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ {symbol} (5m, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12—á)"
                )
            
            return True
        except Exception as e:
            logger.error(f"Error processing signal: {e}")
            return False
    
    async def monitoring_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("Starting monitoring loop...")
        self.is_running = True
        
        while self.is_running:
            try:
                logger.debug(f"Checking pairs at {CHECK_INTERVAL}s interval...")
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤—Å–µ –ø–∞—Ä—ã
                signals = await self.monitor.monitor_all_pairs()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                for signal in signals:
                    await self.process_signal(signal)
                
                if signals:
                    logger.info(f"Found {len(signals)} signals")
                
                # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(CHECK_INTERVAL)
            
            except Exception as e:
                logger.error(f"Error in monitoring loop: {e}")
                await asyncio.sleep(CHECK_INTERVAL)
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        logger.info("MEXC Signal Bot starting...")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ
            await self.telegram.send_message(
                self.chat_id,
                "ü§ñ <b>MEXC Signal Bot –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                "üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ—å—é—á–µ—Ä—Å–æ–≤ –Ω–∞—á–∞–ª—Å—è\n"
                "üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: " + str(CHECK_INTERVAL) + " —Å–µ–∫",
                parse_mode="HTML"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            await self.monitoring_loop()
        
        except KeyboardInterrupt:
            logger.info("Bot interrupted by user")
            await self.stop()
        except Exception as e:
            logger.error(f"Fatal error: {e}")
            await self.stop()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
        logger.info("Stopping MEXC Signal Bot...")
        self.is_running = False
        await self.telegram.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        logger.error("TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID must be set in .env")
        return
    
    bot = MexcSignalBot(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)
    await bot.start()


if __name__ == "__main__":
    asyncio.run(main())
