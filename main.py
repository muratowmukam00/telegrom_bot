import asyncio
import logging
from datetime import datetime, timedelta
from pathlib import Path
from config.settings import (
    TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, CHECK_INTERVAL, LOG_LEVEL
)
from bot.services import TelegramService
from bot.utils import ChartGenerator
from bot.handlers import commands
from services.mexc import OptimizedPairMonitor, MexcClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class CachedPairManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ä–∞–∑ –≤ –¥–µ–Ω—å"""

    def __init__(self, cache_duration_hours: int = 24):
        self.cache_file = Path("logs/.pairs_cache.txt")
        self.cache_duration = timedelta(hours=cache_duration_hours)
        self.cached_pairs = []
        self.last_update_time = None
        Path("logs").mkdir(parents=True, exist_ok=True)

    def _load_from_file(self) -> list:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ä—ã –∏–∑ –∫—ç—à —Ñ–∞–π–ª–∞"""
        try:
            if self.cache_file.exists():
                with open(self.cache_file, 'r') as f:
                    pairs = [line.strip() for line in f.readlines() if line.strip()]
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(pairs)} –ø–∞—Ä –∏–∑ –∫—ç—à–∞")
                return pairs
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
        return []

    def _save_to_file(self, pairs: list):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä—ã –≤ –∫—ç—à —Ñ–∞–π–ª"""
        try:
            with open(self.cache_file, 'w') as f:
                for pair in pairs:
                    f.write(f"{pair}\n")
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(pairs)} –ø–∞—Ä –≤ –∫—ç—à")
            self.last_update_time = datetime.now()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")

    def _is_cache_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç—ë–∫ –ª–∏ –∫—ç—à"""
        if self.last_update_time is None:
            return True
        return datetime.now() - self.last_update_time > self.cache_duration

    async def get_pairs(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (–∏–∑ –∫—ç—à–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å)"""

        # –ï—Å–ª–∏ –∫—ç—à —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∏—Å—Ç—ë–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if not self._is_cache_expired() and self.cached_pairs:
            logger.debug(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ ({len(self.cached_pairs)} –ø–∞—Ä)")
            return self.cached_pairs

        # –ï—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∞ –≤ –ø–∞–º—è—Ç–∏, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
        if not self.cached_pairs:
            self.cached_pairs = self._load_from_file()
            if self.cached_pairs:
                self.last_update_time = datetime.now()
                logger.debug(f"‚úÖ –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ ({len(self.cached_pairs)} –ø–∞—Ä)")
                return self.cached_pairs

        # –ï—Å–ª–∏ –∫—ç—à –∏—Å—Ç—ë–∫ –∏–ª–∏ –ø—É—Å—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑ API
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä —Å MEXC API...")
        try:
            async with MexcClient() as client:
                pairs = await client.get_all_symbols()

            if pairs:
                self.cached_pairs = pairs
                self._save_to_file(pairs)
                logger.info(f"üéâ –ü–æ–ª—É—á–µ–Ω–æ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ {len(pairs)} –ø–∞—Ä")
                return pairs
            else:
                logger.warning("‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞")
                self.cached_pairs = self._load_from_file()
                return self.cached_pairs

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä: {e}")
            # Fallback –Ω–∞ –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞
            self.cached_pairs = self._load_from_file()
            return self.cached_pairs


class MexcSignalBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""

    def __init__(self, bot_token: str, chat_id: str):
        self.telegram = TelegramService(bot_token)
        self.chat_id = chat_id
        self.monitor = OptimizedPairMonitor(
            signal_cooldown=300,  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
            max_concurrent=5,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            requests_per_second=2  # 2 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥—É
        )
        self.is_running = False
        self.signals_found = 0
        self.pair_manager = CachedPairManager(cache_duration_hours=24)

        Path("logs/signals").mkdir(parents=True, exist_ok=True)

    async def process_signal(self, signal_data: dict) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥—Ä–∞—Ñ–∏–∫"""
        try:
            symbol = signal_data['symbol']
            analysis = signal_data['analysis']
            prices_5m = signal_data['prices_5m']
            volumes_5m = signal_data['volumes_5m']

            logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}...")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
            await self.telegram.send_signal_alert(
                self.chat_id,
                symbol,
                analysis
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            chart_path = ChartGenerator.generate_signal_chart(
                symbol,
                prices_5m,
                volumes_5m,
                output_path=f"logs/signals/{symbol}_{timestamp}.png"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            if chart_path:
                await self.telegram.send_photo(
                    self.chat_id,
                    chart_path,
                    caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ {symbol} (5m, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12—á)"
                )

            self.signals_found += 1
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}", exc_info=True)
            return False

    async def monitoring_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –ø–∞—Ä"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        self.is_running = True

        cycle_num = 0

        while self.is_running:
            try:
                cycle_num += 1
                start_time = datetime.now()

                logger.info(f"\n{'=' * 60}")
                logger.info(f"üîÑ –¶–ò–ö–õ #{cycle_num} | {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
                logger.info(f"{'=' * 60}")

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (–∏–∑ –∫—ç—à–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
                symbols_to_check = await self.pair_manager.get_pairs()

                if not symbols_to_check:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä!")
                    await asyncio.sleep(60)
                    continue

                logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(symbols_to_check)} –ø–∞—Ä —Å MEXC")

                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤—Å–µ –ø–∞—Ä—ã
                signals = await self.monitor.monitor_specific_symbols(symbols_to_check)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                for signal in signals:
                    await self.process_signal(signal)

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞
                elapsed = (datetime.now() - start_time).total_seconds()
                stats = await self.monitor.get_statistics()

                logger.info(f"\n{'=' * 60}")
                logger.info(f"üìä –¶–ò–ö–õ #{cycle_num} –ó–ê–í–ï–†–®–Å–ù")
                logger.info(f"{'=' * 60}")
                logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.1f}s")
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)} (–≤—Å–µ–≥–æ: {self.signals_found})")
                logger.info(f"üì° API –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
                logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']}")
                logger.info(f"‚ö†Ô∏è  Rate limits: {stats['rate_limit_hits']}")
                logger.info(f"{'=' * 60}\n")

                # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                wait_time = max(CHECK_INTERVAL - elapsed, 10)
                logger.info(f"üí§ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.0f}s –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º...")
                await asyncio.sleep(wait_time)

            except KeyboardInterrupt:
                logger.info("‚ö†Ô∏è  –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", exc_info=True)
                await asyncio.sleep(60)

    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        logger.info("=" * 60)
        logger.info("ü§ñ MEXC SIGNAL BOT –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø")
        logger.info("=" * 60)

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ
            await self.telegram.send_message(
                self.chat_id,
                f"ü§ñ <b>MEXC Signal Bot –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                f"üìä –†–µ–∂–∏–º: –ü–û–õ–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì (–≤—Å–µ USDT –ø–∞—Ä—ã)\n"
                f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL} —Å–µ–∫\n"
                f"üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: –ü–∞—Ä—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ä–∞–∑ –≤ 24 —á–∞—Å–∞\n"
                f"üéØ –§–∏–ª—å—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã:\n"
                f"  1Ô∏è‚É£ –¶–µ–Ω–∞: ¬±8% –∑–∞ 15 –º–∏–Ω\n"
                f"  2Ô∏è‚É£ RSI 1h: >70 –∏–ª–∏ <30\n"
                f"  3Ô∏è‚É£ RSI 15m: >70 –∏–ª–∏ <30\n\n"
                f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è..."
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            await self.monitoring_loop()

        except KeyboardInterrupt:
            logger.info("‚ö†Ô∏è  –ë–æ—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        finally:
            await self.stop()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MEXC Signal Bot...")
        self.is_running = False

        try:
            await self.telegram.send_message(
                self.chat_id,
                f"üõë <b>Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {self.signals_found}"
            )
        except:
            pass

        await self.telegram.close()
        logger.info("‚úÖ Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env")
        return

    bot = MexcSignalBot(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)
    await bot.start()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")