"""
Configuration Settings - Production Version
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
"""

import os
import logging
from pathlib import Path
from typing import List
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv()

logger = logging.getLogger(__name__)

# ============================================================================
# TELEGRAM SETTINGS
# ============================================================================

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "")

# ============================================================================
# MEXC API SETTINGS
# ============================================================================

MEXC_BASE_URL = os.getenv("MEXC_BASE_URL", "https://contract.mexc.com")
MEXC_API_TIMEOUT = int(os.getenv("MEXC_API_TIMEOUT", "30"))
MEXC_MAX_CONNECTIONS = int(os.getenv("MEXC_MAX_CONNECTIONS", "100"))

# ============================================================================
# BOT OPERATION SETTINGS
# ============================================================================

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "60"))

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
MAX_CONCURRENT_REQUESTS = int(os.getenv("MAX_CONCURRENT_REQUESTS", "20"))

# –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É (rate limiting)
REQUESTS_PER_SECOND = float(os.getenv("REQUESTS_PER_SECOND", "15"))

# ============================================================================
# TRADING FILTERS
# ============================================================================

# –§–∏–ª—å—Ç—Ä 1: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (%)
PRICE_CHANGE_THRESHOLD = float(os.getenv("PRICE_CHANGE_THRESHOLD", "8"))

# –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã (–º–∏–Ω—É—Ç—ã)
PRICE_CHECK_PERIOD_MINUTES = int(os.getenv("PRICE_CHECK_PERIOD_MINUTES", "15"))

# –§–∏–ª—å—Ç—Ä 2 –∏ 3: RSI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
RSI_PERIOD = int(os.getenv("RSI_PERIOD", "14"))
RSI_OVERBOUGHT = int(os.getenv("RSI_OVERBOUGHT", "70"))
RSI_OVERSOLD = int(os.getenv("RSI_OVERSOLD", "30"))

# ============================================================================
# SIGNAL SETTINGS
# ============================================================================

# Cooldown –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã (—Å–µ–∫—É–Ω–¥—ã)
SIGNAL_COOLDOWN = int(os.getenv("SIGNAL_COOLDOWN", "300"))

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ —Ü–∏–∫–ª
MIN_SIGNALS_PER_CYCLE = int(os.getenv("MIN_SIGNALS_PER_CYCLE", "1"))

# –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏?
SEND_CHART = os.getenv("SEND_CHART", "true").lower() == "true"

# –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑?
SEND_DETAILED_ANALYSIS = os.getenv("SEND_DETAILED_ANALYSIS", "true").lower() == "true"

# ============================================================================
# CACHING SETTINGS
# ============================================================================

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞ (—á–∞—Å—ã)
CACHE_DURATION_HOURS = int(os.getenv("CACHE_DURATION_HOURS", "24"))

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞
CACHE_DIR = Path(os.getenv("CACHE_DIR", "logs"))

# ============================================================================
# LOGGING SETTINGS
# ============================================================================

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()

# –§–∞–π–ª –ª–æ–≥–æ–≤
LOG_FILE = Path(os.getenv("LOG_FILE", "logs/bot.log"))

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ (–±–∞–π—Ç—ã)
LOG_MAX_BYTES = int(os.getenv("LOG_MAX_BYTES", "10485760"))  # 10MB

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ backup —Ñ–∞–π–ª–æ–≤
LOG_BACKUP_COUNT = int(os.getenv("LOG_BACKUP_COUNT", "5"))

# ============================================================================
# FILTERING SETTINGS
# ============================================================================

# Whitelist –ø–∞—Ä (–µ—Å–ª–∏ –ø—É—Å—Ç–æ - –≤—Å–µ USDT)
_whitelist = os.getenv("TRADING_PAIRS_WHITELIST", "")
TRADING_PAIRS_WHITELIST: List[str] = (
    [p.strip() for p in _whitelist.split(",") if p.strip()]
    if _whitelist
    else []
)

# Blacklist –ø–∞—Ä
_blacklist = os.getenv("TRADING_PAIRS_BLACKLIST", "")
TRADING_PAIRS_BLACKLIST: List[str] = (
    [p.strip() for p in _blacklist.split(",") if p.strip()]
    if _blacklist
    else []
)

# ============================================================================
# HEALTH CHECK SETTINGS
# ============================================================================

# –ò–Ω—Ç–µ—Ä–≤–∞–ª health check (—Å–µ–∫—É–Ω–¥—ã)
HEALTH_CHECK_INTERVAL = int(os.getenv("HEALTH_CHECK_INTERVAL", "3600"))  # 1 —á–∞—Å

# ============================================================================
# OPTIONAL FEATURES
# ============================================================================

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)
USE_DATABASE = os.getenv("USE_DATABASE", "false").lower() == "true"
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///signals.db")

# Discord —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
USE_DISCORD = os.getenv("USE_DISCORD", "false").lower() == "true"
DISCORD_WEBHOOK_URL = os.getenv("DISCORD_WEBHOOK_URL", "")


# ============================================================================
# VALIDATION
# ============================================================================

class ConfigValidationError(Exception):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    pass


def validate_settings() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    Returns:
        True –µ—Å–ª–∏ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã

    Raises:
        ConfigValidationError: –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    """
    errors = []
    warnings = []

    # === –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===

    # Telegram
    if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        errors.append("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

    if not TELEGRAM_CHAT_ID or TELEGRAM_CHAT_ID == "YOUR_CHAT_ID_HERE":
        errors.append("TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

    # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã
    if CHECK_INTERVAL < 10:
        errors.append("CHECK_INTERVAL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 10 —Å–µ–∫—É–Ω–¥")

    if SIGNAL_COOLDOWN < 60:
        warnings.append("SIGNAL_COOLDOWN < 60 —Å–µ–∫—É–Ω–¥ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Å–ø–∞–º")

    # –ü–æ—Ä–æ–≥–∏
    if PRICE_CHANGE_THRESHOLD <= 0:
        errors.append("PRICE_CHANGE_THRESHOLD –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0")

    if PRICE_CHANGE_THRESHOLD < 5:
        warnings.append("PRICE_CHANGE_THRESHOLD < 5% –º–æ–∂–µ—Ç –¥–∞—Ç—å –º–Ω–æ–≥–æ –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

    # RSI
    if RSI_OVERBOUGHT <= RSI_OVERSOLD:
        errors.append("RSI_OVERBOUGHT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > RSI_OVERSOLD")

    if RSI_PERIOD < 2:
        errors.append("RSI_PERIOD –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 2")

    # –¢–∞–π–º–∞—É—Ç—ã
    if MEXC_API_TIMEOUT < 5:
        warnings.append("MEXC_API_TIMEOUT < 5 —Å–µ–∫—É–Ω–¥ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ç–∞–π–º–∞—É—Ç—ã")

    # Rate limiting
    if REQUESTS_PER_SECOND > 20:
        warnings.append("REQUESTS_PER_SECOND > 20 –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å rate limit –æ—Ç MEXC")

    # === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===

    if errors:
        for error in errors:
            logger.error(f"‚ùå {error}")
        raise ConfigValidationError(
            f"–ù–∞–π–¥–µ–Ω–æ {len(errors)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
        )

    if warnings:
        for warning in warnings:
            logger.warning(f"‚ö†Ô∏è  {warning}")

    logger.info("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")

    if warnings:
        logger.info(f"‚ÑπÔ∏è  –ù–∞–π–¥–µ–Ω–æ {len(warnings)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")

    return True


def log_settings_summary():
    """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    logger.info("=" * 70)
    logger.info("üìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê")
    logger.info("=" * 70)

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–∫–µ–Ω
    token_display = (
        f"{TELEGRAM_BOT_TOKEN[:10]}...{TELEGRAM_BOT_TOKEN[-4:]}"
        if TELEGRAM_BOT_TOKEN and len(TELEGRAM_BOT_TOKEN) > 14
        else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    )

    logger.info(f"Telegram Bot Token: {token_display}")
    logger.info(f"Telegram Chat ID: {TELEGRAM_CHAT_ID if TELEGRAM_CHAT_ID else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    logger.info("")

    logger.info(f"MEXC Base URL: {MEXC_BASE_URL}")
    logger.info(f"API Timeout: {MEXC_API_TIMEOUT}s")
    logger.info(f"Max Connections: {MEXC_MAX_CONNECTIONS}")
    logger.info("")

    logger.info(f"Check Interval: {CHECK_INTERVAL}s")
    logger.info(f"Signal Cooldown: {SIGNAL_COOLDOWN}s")
    logger.info("")

    logger.info(f"Price Threshold: {PRICE_CHANGE_THRESHOLD}%")
    logger.info(f"RSI Settings: Period={RSI_PERIOD}, OB={RSI_OVERBOUGHT}, OS={RSI_OVERSOLD}")
    logger.info("")

    logger.info(f"Send Charts: {'‚úì' if SEND_CHART else '‚úó'}")
    logger.info(f"Send Detailed Analysis: {'‚úì' if SEND_DETAILED_ANALYSIS else '‚úó'}")
    logger.info("")

    logger.info(f"Log Level: {LOG_LEVEL}")
    logger.info(f"Log File: {LOG_FILE}")
    logger.info("")

    if TRADING_PAIRS_WHITELIST:
        logger.info(f"Whitelist: {len(TRADING_PAIRS_WHITELIST)} –ø–∞—Ä")

    if TRADING_PAIRS_BLACKLIST:
        logger.info(f"Blacklist: {len(TRADING_PAIRS_BLACKLIST)} –ø–∞—Ä")

    logger.info("=" * 70)


# ============================================================================
# INITIALIZATION
# ============================================================================

# –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
CACHE_DIR.mkdir(parents=True, exist_ok=True)
LOG_FILE.parent.mkdir(parents=True, exist_ok=True)
Path("charts").mkdir(exist_ok=True)
Path("data").mkdir(exist_ok=True)

# ============================================================================
# MAIN (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
# ============================================================================

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )

    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        validate_settings()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        log_settings_summary()

        logger.info("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –¥–ª—è production!")

    except ConfigValidationError as e:
        logger.error(f"\n‚ùå –û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò: {e}")
        logger.error("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ .env —Ñ–∞–π–ª–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞")
        exit(1)

    except Exception as e:
        logger.error(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        exit(1)