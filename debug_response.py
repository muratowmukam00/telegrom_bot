import asyncio
import aiohttp
from config.settings import MEXC_BASE_URL

async def debug_response():
    """–°–º–æ—Ç—Ä–∏–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API"""
    
    print("=" * 60)
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –û–¢–í–ï–¢–ê")
    print("=" * 60)
    
    async with aiohttp.ClientSession() as session:
        url = f"{MEXC_BASE_URL}/api/v1/contract/kline/BTC_USDT"
        params = {
            "interval": "Min1",
            "start": "",
            "end": ""
        }
        
        print(f"\nüì° –ó–∞–ø—Ä–æ—Å:")
        print(f"   URL: {url}")
        print(f"   Params: {params}")
        
        async with session.get(url, params=params, timeout=aiohttp.ClientTimeout(total=10)) as resp:
            print(f"\nüì• –û—Ç–≤–µ—Ç:")
            print(f"   Status: {resp.status}")
            print(f"   Headers: {dict(resp.headers)}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            text = await resp.text()
            print(f"\nüìÑ Raw response (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(f"   {text[:500]}")
            
            # –ü–∞—Ä—Å–∏–º JSON
            try:
                import json
                data = json.loads(text)
                
                print(f"\nüìä Parsed JSON:")
                print(f"   Type: {type(data)}")
                print(f"   Keys: {data.keys() if isinstance(data, dict) else 'Not a dict'}")
                
                if isinstance(data, dict):
                    print(f"\n   success: {data.get('success')}")
                    print(f"   code: {data.get('code')}")
                    print(f"   message: {data.get('message')}")
                    
                    if 'data' in data:
                        klines = data['data']
                        print(f"\n   data type: {type(klines)}")
                        print(f"   data length: {len(klines) if isinstance(klines, list) else 'N/A'}")
                        
                        if isinstance(klines, list) and len(klines) > 0:
                            print(f"\n   –ü–µ—Ä–≤–∞—è —Å–≤–µ—á–∞:")
                            print(f"   Type: {type(klines[0])}")
                            print(f"   Content: {klines[0]}")
                            
                            if isinstance(klines[0], dict):
                                print(f"   Keys: {klines[0].keys()}")
                        else:
                            print(f"   ‚ö†Ô∏è  data –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–ø–∏—Å–æ–∫")
                    else:
                        print(f"\n   ‚ö†Ô∏è  'data' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                
                print(f"\nüìã –ü–æ–ª–Ω—ã–π JSON (–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π):")
                print(json.dumps(data, indent=2, ensure_ascii=False))
                
            except json.JSONDecodeError as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    
    print("\n" + "=" * 60)


if __name__ == "__main__":
    asyncio.run(debug_response())
