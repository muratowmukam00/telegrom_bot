import asyncio
from config.settings import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
from bot.services import TelegramService
from bot.utils import ChartGenerator
from services.mexc import MexcClient


async def send_real_charts():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Ç–æ–ø –ø–∞—Ä —Å MEXC"""

    telegram = TelegramService(TELEGRAM_BOT_TOKEN)

    symbols_to_chart = ["BTC_USDT", "ETH_USDT", "SOL_USDT"]
    print("–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å MEXC –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏...\n")

    async with MexcClient() as client:
        for symbol in symbols_to_chart:
            try:
                print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {symbol}...")

                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (5m, 144 —Å–≤–µ—á–∏ ~12 —á–∞—Å–æ–≤)
                klines_5m = await client.get_klines(symbol, "5m", 144)
                if not klines_5m:
                    print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
                print(f"  –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(klines_5m)}")

                # –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é - —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ —Ä–∞–∑–±–µ—Ä—ë—Ç —Ñ–æ—Ä–º–∞—Ç
                chart_path = ChartGenerator.generate_signal_chart(
                    symbol=symbol,
                    candles=klines_5m,  # –ü–µ—Ä–µ–¥–∞—ë–º –∫–∞–∫ –µ—Å—Ç—å
                    output_path=f"logs/{symbol}_real.png"
                )

                if chart_path:
                    print(f"  ‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {chart_path}")

                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –¥–ª—è caption
                    if isinstance(klines_5m, dict):
                        closes = klines_5m.get('realClose', klines_5m.get('close', []))
                        highs = klines_5m.get('realHigh', klines_5m.get('high', []))
                        lows = klines_5m.get('realLow', klines_5m.get('low', []))
                        last_price = closes[-1] if closes else 0
                        max_price = max(highs) if highs else 0
                        min_price = min(lows) if lows else 0
                    else:
                        last_price = klines_5m[-1].get('close', 0)
                        max_price = max(k.get('high', 0) for k in klines_5m)
                        min_price = min(k.get('low', 0) for k in klines_5m)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                    result = await telegram.send_photo(
                        TELEGRAM_CHAT_ID,
                        chart_path,
                        caption=f"üìä {symbol} - 5m Candlestick Chart (Last 12h)\n"
                                f"Close: {last_price:.8f}\n"
                                f"High: {max_price:.8f}\n"
                                f"Low: {min_price:.8f}"
                    )

                    if result:
                        print(f"  ‚úÖ –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                    else:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")

                    await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                else:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")

            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
                import traceback
                traceback.print_exc()

    await telegram.close()
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram")


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
async def send_real_charts_old_format():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (—Ç–æ–ª—å–∫–æ close prices)"""

    telegram = TelegramService(TELEGRAM_BOT_TOKEN)
    symbols_to_chart = ["BTC_USDT", "ETH_USDT", "SOL_USDT"]

    async with MexcClient() as client:
        for symbol in symbols_to_chart:
            try:
                print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {symbol}...")

                klines_5m = await client.get_klines(symbol, "5m", 144)
                if not klines_5m:
                    continue

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã –∏ –æ–±—ä–µ–º—ã
                prices = client.extract_close_prices(klines_5m)
                volumes = client.extract_volumes(klines_5m)

                if len(prices) < 50:
                    continue

                # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã!
                chart_path = ChartGenerator.generate_signal_chart(
                    symbol=symbol,
                    prices_5m=prices,  # –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
                    volumes_5m=volumes,  # –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
                    output_path=f"logs/{symbol}_real.png"
                )

                if chart_path:
                    result = await telegram.send_photo(
                        TELEGRAM_CHAT_ID,
                        chart_path,
                        caption=f"üìä {symbol}\n–¶–µ–Ω–∞: {prices[-1]:.8f}"
                    )
                    await asyncio.sleep(2)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")

    await telegram.close()


if __name__ == "__main__":
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–≤–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    asyncio.run(send_real_charts())

    # –ò–ª–∏ –≤—Ç–æ—Ä–æ–π –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ª–∏–Ω–∏–π
    # asyncio.run(send_real_charts_old_format())