import asyncio
from config.settings import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
from bot.services import TelegramService
from bot.utils import ChartGenerator
from services.mexc import MexcClient


async def send_real_charts():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Ç–æ–ø –ø–∞—Ä —Å MEXC ‚Äî –∫–∞–∫ –±—É–¥—Ç–æ —Å–∏–≥–Ω–∞–ª"""

    telegram = TelegramService(TELEGRAM_BOT_TOKEN)
    symbols_to_chart = ["BTC_USDT", "ETH_USDT", "SOL_USDT"]
    print("üöÄ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å MEXC –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —á–µ—Ä–µ–∑ TelegramService...\n")

    async with MexcClient() as client:
        for symbol in symbols_to_chart:
            try:
                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {symbol}...")

                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (5m, 144 —Å–≤–µ—á–∏ ~12 —á–∞—Å–æ–≤)
                klines_5m = await client.get_klines(symbol, "5m", 144)
                if not klines_5m:
                    print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                    continue

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
                chart_path = ChartGenerator.generate_signal_chart(
                    symbol=symbol,
                    candles=klines_5m,
                    output_path=f"logs/{symbol}_real.png"
                )

                if not chart_path:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {symbol}")
                    continue

                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
                last_price = klines_5m[-1].get('close', 0)
                max_price = max(k.get('high', 0) for k in klines_5m)
                min_price = min(k.get('low', 0) for k in klines_5m)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è send_signal_alert
                fake_analysis = {
                    "filter_1_price": (True, 1.25),
                    "filter_2_rsi_1h": (True, 55.32),
                    "filter_3_rsi_15m": (False, 68.45),
                    "signal_triggered": True
                }

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ TelegramService
                await telegram.send_signal_alert(
                    TELEGRAM_CHAT_ID,
                    symbol,
                    fake_analysis
                )

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º –≥—Ä–∞—Ñ–∏–∫
                caption = (
                    f"üìä {symbol} - 5m Chart (Last 12h)\n"
                    f"üí∞ <b>–¶–µ–Ω–∞:</b> {last_price:.4f}\n"
                    f"üìà High: {max_price:.4f}\n"
                    f"üìâ Low: {min_price:.4f}"
                )

                await telegram.send_photo(
                    TELEGRAM_CHAT_ID,
                    chart_path,
                    caption=caption
                )

                print(f"  ‚úÖ –ì—Ä–∞—Ñ–∏–∫ –∏ —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è {symbol}")
                await asyncio.sleep(3)

            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
                import traceback
                traceback.print_exc()

    await telegram.close()
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram ‚Äî —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")


if __name__ == "__main__":
    asyncio.run(send_real_charts())
