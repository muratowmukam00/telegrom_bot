import asyncio
import aiohttp
from config.settings import MEXC_BASE_URL


async def debug_mexc_api():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç MEXC API"""

    print("=" * 60)
    print("üîç –û–¢–õ–ê–î–ö–ê MEXC API - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    print("=" * 60)

    async with aiohttp.ClientSession() as session:

        # –¢–µ—Å—Ç 1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç interval
        print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã interval...")

        intervals = [
            ("Min1", "1 –º–∏–Ω—É—Ç–∞"),
            ("Min5", "5 –º–∏–Ω—É—Ç"),
            ("Min15", "15 –º–∏–Ω—É—Ç"),
            ("Min60", "1 —á–∞—Å"),
            ("Hour4", "4 —á–∞—Å–∞"),
            ("Day1", "1 –¥–µ–Ω—å"),
            ("1m", "1m –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π"),
            ("5m", "5m –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π"),
        ]

        for interval, desc in intervals:
            url = f"{MEXC_BASE_URL}/api/v1/contract/kline/BTC_USDT"
            params = {
                "interval": interval,
                "start": "",
                "end": ""
            }

            try:
                async with session.get(url, params=params, timeout=aiohttp.ClientTimeout(total=10)) as resp:
                    if resp.status == 200:
                        data = await resp.json()

                        if data.get("success") and data.get("data"):
                            klines = data["data"]
                            print(f"   ‚úÖ {interval:10s} ({desc:20s}): {len(klines)} —Å–≤–µ—á–µ–π")

                            if klines:
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π —Å–≤–µ—á–∏
                                print(
                                    f"      –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {list(klines[0].keys()) if isinstance(klines[0], dict) else 'Array'}")
                                if isinstance(klines[0], dict):
                                    print(f"      –ü—Ä–∏–º–µ—Ä: open={klines[0].get('open')}, close={klines[0].get('close')}")
                                else:
                                    print(f"      –ü—Ä–∏–º–µ—Ä: {klines[0]}")
                        else:
                            print(f"   ‚ùå {interval:10s} ({desc:20s}): {data.get('message', 'No data')}")
            except Exception as e:
                print(f"   ‚ùå {interval:10s}: –û—à–∏–±–∫–∞ - {e}")

        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å start/end –≤—Ä–µ–º–µ–Ω–µ–º
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏...")

        import time
        end_time = int(time.time())
        start_time = end_time - 3600  # 1 —á–∞—Å –Ω–∞–∑–∞–¥

        url = f"{MEXC_BASE_URL}/api/v1/contract/kline/BTC_USDT"
        params = {
            "interval": "Min1",
            "start": start_time,
            "end": end_time
        }

        try:
            async with session.get(url, params=params, timeout=aiohttp.ClientTimeout(total=10)) as resp:
                data = await resp.json()

                if data.get("success") and data.get("data"):
                    print(f"   ‚úÖ –° –≤—Ä–µ–º–µ–Ω–µ–º: –ø–æ–ª—É—á–µ–Ω–æ {len(data['data'])} —Å–≤–µ—á–µ–π")
                else:
                    print(f"   ‚ùå –° –≤—Ä–µ–º–µ–Ω–µ–º: {data.get('message')}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

        # –¢–µ—Å—Ç 3: –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–ï–ó start/end...")

        url = f"{MEXC_BASE_URL}/api/v1/contract/kline/BTC_USDT"
        params = {"interval": "Min1"}

        try:
            async with session.get(url, params=params, timeout=aiohttp.ClientTimeout(total=10)) as resp:
                data = await resp.json()

                if data.get("success") and data.get("data"):
                    klines = data["data"]
                    print(f"   ‚úÖ –ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏: –ø–æ–ª—É—á–µ–Ω–æ {len(klines)} —Å–≤–µ—á–µ–π")

                    if klines:
                        first = klines[0]
                        last = klines[-1]
                        print(f"   –ü–µ—Ä–≤–∞—è —Å–≤–µ—á–∞: {first}")
                        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: {last}")
                else:
                    print(f"   ‚ùå –ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏: {data}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º ticker (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
        print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º ticker...")
        url = f"{MEXC_BASE_URL}/api/v1/contract/ticker"
        params = {"symbol": "BTC_USDT"}

        try:
            async with session.get(url, params=params, timeout=aiohttp.ClientTimeout(total=10)) as resp:
                data = await resp.json()

                if data.get("success") and data.get("data"):
                    ticker = data["data"][0] if isinstance(data["data"], list) else data["data"]
                    print(f"   ‚úÖ Ticker:")
                    print(f"      Symbol: {ticker.get('symbol')}")
                    print(f"      Last Price: {ticker.get('lastPrice')}")
                    print(f"      24h Change: {ticker.get('riseFallRate')}%")
                else:
                    print(f"   ‚ùå Ticker: {data}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

    print("\n" + "=" * 60)
    print("‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print("=" * 60)


if __name__ == "__main__":
    asyncio.run(debug_mexc_api())